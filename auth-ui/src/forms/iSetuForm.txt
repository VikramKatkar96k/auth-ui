import React, { useState, useEffect } from "react";
import {
  ArrowLeft,
  FileText,
  User,
  MapPin,
  Briefcase,
  Users,
  Download,
  CheckCircle,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/hooks/use-toast";
import districtsData from "../data/districts.json";
import api from "@/lib/axios";
import Layout from "@/components/home/Layout";


// ЁЯСЙ TypeScript interfaces
interface FormData {
  name: string;
  age: string;
  district: string;
  sub: string;
  village: string;
  beneficiaryType: string;
  childName: string;
  valueChild: string;
  caste: string;
  Religion: string;
}


interface Checkboxes {
  casteCheckbox: boolean;
  incomeCheckbox: boolean;
  Residency: boolean;
  vivah: boolean;
  alp: boolean;
  farmer: boolean;
  vanshavali: boolean;
  nishar: boolean;
  formA: boolean;
  formB: boolean;
  bhumihin: boolean;
  non: boolean;
}


const SetuForm: React.FC = () => {
  const { toast } = useToast();

  // ЁЯУж State for form data
  

  const [form, setForm] = useState<FormData>({
    name: "",
    age: "",
    district: "",
    sub: "",
    village: "",
    beneficiaryType: "",
    childName: "рд╕реНрд╡рдд:",
    valueChild: "",
    caste: "",
    Religion: "",
  });

  

  // ЁЯУж State for checkbox-based document selection
  const [checkboxes, setCheckboxes] = useState<Checkboxes>({
    casteCheckbox: false,
    incomeCheckbox: false,
    Residency: false,
    vivah: false,
    alp: false,
    farmer: false,
    vanshavali: false,
    nishar: false,
    formA: false,
    formB: false,
    bhumihin: false,
    non: false,
  });

  // ЁЯУж State for taluka/village dropdowns
  const [talukaList, setTalukaList] = useState<any[]>([]);
  const [villageList, setVillageList] = useState<string[]>([]);

  // ЁЯУж State for success/error UI
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  const [submittedDocuments, setSubmittedDocuments] = useState<string[]>([]);
  const [queryParams, setQueryParams] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  // ЁЯФБ On mount: Set default district, taluka, village
  useEffect(() => {
    if (districtsData.length > 0) {
      const defaultDistrict = districtsData[0];
      const defaultTaluka = defaultDistrict.subdistricts[0];
      const defaultVillage = defaultTaluka.villages[0];

      setForm((prev) => ({
        ...prev,
        district: defaultDistrict.name,
        sub: defaultTaluka.name,
        village: defaultVillage,
      }));

      setTalukaList(defaultDistrict.subdistricts);
      setVillageList(defaultTaluka.villages);
    }
  }, []);

  // ЁЯФД District change handler
  const handleDistrictChange = (selectedDistrict: string) => {
    const district = districtsData.find((d) => d.name === selectedDistrict);
    const talukas = district?.subdistricts || [];
    const villages = talukas[0]?.villages || [];

    setForm((prev) => ({
      ...prev,
      district: selectedDistrict,
      sub: talukas[0]?.name || "",
      village: villages[0] || "",
    }));

    setTalukaList(talukas);
    setVillageList(villages);
  };

  // ЁЯФД Taluka change handler
  const handleTalukaChange = (selectedTaluka: string) => {
    const taluka = talukaList.find((t: any) => t.name === selectedTaluka);
    const villages = taluka?.villages || [];

    setForm((prev) => ({
      ...prev,
      sub: selectedTaluka,
      village: villages[0] || "",
    }));

    setVillageList(villages);
  };

  // ЁЯФД Village change handler
  const handleVillageChange = (selectedVillage: string) => {
    setForm((prev) => ({ ...prev, village: selectedVillage }));
  };

  // ЁЯФД Input handler
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  // ЁЯФД Select change handler
  const handleSelectChange = (name: string, value: string) => {
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  // ЁЯФД Checkbox change handler
  const handleCheckboxChange = (id: string, checked: boolean) => {
    setCheckboxes((prev) => ({ ...prev, [id]: checked }));
  };

  // тмЕя╕П Go back
  const handleBack = () => {
    window.history.back();
  };

  // тЬЕ Submit form
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // ЁЯФР Basic validation
      const required = ["name", "age", "village", "sub", "district", "beneficiaryType"];
      for (let key of required) {
        if (!form[key as keyof typeof form]) {
          setError("рд╕рд░реНрд╡ рдлреАрд▓реНрдб рдЕрдирд┐рд╡рд╛рд░реНрдп рдЖрд╣реЗрдд!");
          return;
        }
      }

      // ЁЯФР Caste check if caste document selected
      if (checkboxes.casteCheckbox && (!form.caste || !form.Religion)) {
        setError("рдХреГрдкрдпрд╛ рдЬрд╛рдд рдЖрдгрд┐ рдзрд░реНрдо рд▓рд┐рд╣рд╛!");
        return;
      }

      // ЁЯФБ Format child name if "рдореБрд▓рдЧрд╛/рдореБрд▓рдЧреА"
      let finalChild = form.childName;
      if (["рдореБрд▓рдЧрд╛", "рдореБрд▓рдЧреА"].includes(form.childName) && form.valueChild) {
        finalChild = `${form.childName} - ${form.valueChild}`;
      }

      // ЁЯз╛ Get selected documents from checkboxes
      const selectedDocuments = Object.entries(checkboxes)
        .filter(([_, value]) => value)
        .map(([key]) => key);

      if (selectedDocuments.length === 0) {
        setError("рдХреГрдкрдпрд╛ рдХрд┐рдорд╛рди рдПрдХ рджрд╕реНрддрдРрд╡рдЬ рдирд┐рд╡рдбрд╛!");
        return;
      }

      const dataToSend = {
        ...form,
        childName: finalChild,
        selectedDocuments,
      };

      // ЁЯУб Simulate API call (replace with actual API later)
      await new Promise((resolve) => setTimeout(resolve, 2000));
      // await api.post("/api/setu-form", dataToSend);

      // тЬЕ Show success
      setSuccess("тЬЕ рдлреЙрд░реНрдо рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рд╕рдмрдорд┐рдЯ рдЭрд╛рд▓рд╛ рдЖрд╣реЗ!");
      setError("");

      // ЁЯФЧ Prepare download links
      const queryObj: Record<string, string> = {
        ...form,
        childName: finalChild,
        selectedDocuments: selectedDocuments.join(","),
      };
      const query = new URLSearchParams(queryObj).toString();

      setSubmittedDocuments(selectedDocuments);
      setQueryParams(query);

      toast({
        title: "рдлреЙрд░реНрдо рд╕рдмрдорд┐рдЯ рдЭрд╛рд▓рд╛!",
        description: "рддреБрдордЪрд╛ рдлреЙрд░реНрдо рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рд╕рдмрдорд┐рдЯ рдЭрд╛рд▓рд╛ рдЖрд╣реЗ.",
      });

      // ЁЯФД Reset form
      setForm({
        name: "",
        age: "",
        district: "",
        sub: "",
        village: "",
        beneficiaryType: "",
        childName: "рд╕реНрд╡рдд:",
        valueChild: "",
        caste: "",
        Religion: "",
      });

      setCheckboxes({
        casteCheckbox: false,
        incomeCheckbox: false,
        Residency: false,
        vivah: false,
        alp: false,
        farmer: false,
        vanshavali: false,
        nishar: false,
        formA: false,
        formB: false,
        bhumihin: false,
        non: false,
      });

      // ЁЯХТ Auto-clear messages
      setTimeout(() => {
        setSuccess("");
        setSubmittedDocuments([]);
        setQueryParams("");
      }, 10000);
    } catch (error: any) {
      const message = error.response?.data?.message || error.message || "Unknown error";
      setError(message);
      setSuccess("");
      setTimeout(() => setError(""), 4000);
    } finally {
      setIsSubmitting(false);
    }
  };

  // ЁЯУД Document selection UI
  const documentOptions = [
    { id: "casteCheckbox", label: "рдЬрд╛рдд рдкреНрд░рдорд╛рдгрдкрддреНрд░", icon: User, color: "text-blue-600" },
    { id: "Residency", label: "рд░рд╣рд┐рд╡рд╛рд╕реА рдкреНрд░рдорд╛рдгрдкрддреНрд░", icon: MapPin, color: "text-green-600" },
    { id: "incomeCheckbox", label: "рдЙрддреНрдкрдиреНрди рдкреНрд░рдорд╛рдгрдкрддреНрд░", icon: Briefcase, color: "text-orange-600" },
    { id: "vivah", label: "рд╡рд┐рд╡рд╛рд╣ рд╢рдкрдердкрддреНрд░", icon: Users, color: "text-pink-600" },
    { id: "alp", label: "рдЕрд▓реНрдкрднреВрдзрд╛рд░рдХ рд╢рдкрдердкрддреНрд░", icon: FileText, color: "text-purple-600" },
    { id: "farmer", label: "рд╢реЗрддрдХрд░реА рд╢рдкрдердкрддреНрд░", icon: FileText, color: "text-emerald-600" },
    { id: "vanshavali", label: "рд╡рдВрд╢рд╛рд╡рд▓реА", icon: FileText, color: "text-indigo-600" },
    { id: "nishar", label: "рдирд┐рд░рдХреНрд╖рд░ рдкреНрд░рдорд╛рдгрдкрддреНрд░", icon: FileText, color: "text-gray-600" },
    { id: "formA", label: "рдлреЙрд░реНрдо A", icon: FileText, color: "text-cyan-600" },
    { id: "formB", label: "рдлреЙрд░реНрдо B", icon: FileText, color: "text-teal-600" },
    { id: "bhumihin", label: "рднреВрдорд┐рд╣реАрди рдкреНрд░рдорд╛рдгрдкрддреНрд░", icon: FileText, color: "text-rose-600" },
    { id: "non", label: "рдиреЙрди рдХреНрд░рд┐рдореАрд▓реЗрдпрд░", icon: FileText, color: "text-amber-600" },
  ];

  return (
  <Layout>
    <div className="w-full h-screen overflow-y-auto p-4 bg-gradient-subtle">
     
        
    
    <div className="w-screen h-screen overflow-y-auto bg-gradient-subtle p-4">
  <div className="w-full h-full flex flex-col items-center justify-start">
        {/* Header with Back Button */}
        <div className="flex items-center gap-4 mb-8">
                    

        <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
          <CardHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-t-lg">
            <CardTitle className="text-center text-xl font-semibold flex items-center justify-center gap-2">
              <FileText className="h-6 w-6" />
              ЁЯУЭ рдкреНрд░рдорд╛рдгрдкрддреНрд░рд╛рдмрд╛рдмрдд рд╕реНрд╡рдпрдВ рдШреЛрд╖рдгрд╛рдкрддреНрд░
            </CardTitle>
          </CardHeader>

          {/* Success Message with Document Links */}
          {success && submittedDocuments.length > 0 && (
            <div className="m-6 p-6 bg-success/10 border border-success/20 rounded-lg">
              <div className="text-center text-success font-semibold mb-4 flex items-center justify-center gap-2">
                <CheckCircle className="h-5 w-5" />
                {success}
              </div>
              <div className="space-y-4">
                <h2 className="text-center text-lg font-semibold text-success">ЁЯУЭ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рджрд╕реНрддрдРрд╡рдЬ:</h2>
                <div className="flex flex-wrap justify-center gap-4">
                  {submittedDocuments.map((id) => {
                    const option = documentOptions.find(opt => opt.id === id);
                    const label = option?.label || id;

                    return (
                      <Button
                        key={id}
                        variant="outline"
                        className="bg-card border-success/30 text-success hover:bg-success/10 gap-2"
                        onClick={() => {
                          toast({
                            title: "рджрд╕реНрддрдРрд╡рдЬ рдбрд╛рдЙрдирд▓реЛрдб",
                            description: `${label} рдбрд╛рдЙрдирд▓реЛрдб рд╣реЛрдд рдЖрд╣реЗ...`,
                          });
                        }}
                      >
                        <Download className="h-4 w-4" />
                        {label}
                      </Button>
                    );
                  })}
                </div>
              </div>
            </div>
          )}

          {/* Error Message */}
          {error && (
            <div className="m-6 p-4 bg-destructive/10 border border-destructive/20 rounded-lg">
              <div className="text-destructive font-semibold flex items-center gap-2">
                <span className="text-lg">тЪая╕П</span>
                рддреНрд░реБрдЯреА: {error}
              </div>
            </div>
          )}
    

          <CardContent className="p-8">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Personal Information Section */}
              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="name" className="text-sm font-semibold text-foreground flex items-center gap-2">
                    <User className="h-4 w-4 text-primary" />
                    рдирд╛рд╡ *
                  </Label>
                  <Input
                    id="name"
                    name="name"
                    value={form.name}
                    onChange={handleInputChange}
                    className="transition-all duration-200 focus:shadow-md"
                    placeholder="рддреБрдордЪреЗ рдкреВрд░реНрдг рдирд╛рд╡ рд▓рд┐рд╣рд╛"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="age" className="text-sm font-semibold text-foreground">
                    рд╡рдп *
                  </Label>
                  <Input
                    id="age"
                    name="age"
                    type="number"
                    value={form.age}
                    onChange={handleInputChange}
                    className="transition-all duration-200 focus:shadow-md"
                    placeholder="рддреБрдордЪреЗ рд╡рдп рд▓рд┐рд╣рд╛"
                  />
                </div>
              </div>

              {/* Location Section */}
              <div className="space-y-4">
                <div className="flex items-center gap-2 mb-4">
                  <MapPin className="h-5 w-5 text-primary" />
                  <h3 className="text-lg font-semibold text-foreground">рд╕реНрдерд╛рди рдорд╛рд╣рд┐рддреА</h3>
                </div>
                
                <div className="grid md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label className="text-sm font-semibold text-foreground">рдЬрд┐рд▓реНрд╣рд╛ *</Label>
                    <Select value={form.district} onValueChange={handleDistrictChange}>
                      <SelectTrigger>
                        <SelectValue placeholder="рдЬрд┐рд▓реНрд╣рд╛ рдирд┐рд╡рдбрд╛" />
                      </SelectTrigger>
                      <SelectContent>
                        {districtsData.map((d, i) => (
                          <SelectItem key={i} value={d.name}>{d.name}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm font-semibold text-foreground">рддрд╛рд▓реБрдХрд╛ *</Label>
                    <Select value={form.sub} onValueChange={handleTalukaChange}>
                      <SelectTrigger>
                        <SelectValue placeholder="рддрд╛рд▓реБрдХрд╛ рдирд┐рд╡рдбрд╛" />
                      </SelectTrigger>
                      <SelectContent>
                        {talukaList.map((t: any, i) => (
                          <SelectItem key={i} value={t.name}>{t.name}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm font-semibold text-foreground">рдЧрд╛рд╡ *</Label>
                    <Select value={form.village} onValueChange={handleVillageChange}>
                      <SelectTrigger>
                        <SelectValue placeholder="рдЧрд╛рд╡ рдирд┐рд╡рдбрд╛" />
                      </SelectTrigger>
                      <SelectContent>
                        {villageList.map((v, i) => (
                          <SelectItem key={i} value={v}>{v}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

              {/* Occupation & Beneficiary Section */}
              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label className="text-sm font-semibold text-foreground flex items-center gap-2">
                    <Briefcase className="h-4 w-4 text-primary" />
                    рд╡реНрдпрд╡рд╕рд╛рдп *
                  </Label>
                  <Select value={form.beneficiaryType} onValueChange={(value) => handleSelectChange("beneficiaryType", value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="рд╡реНрдпрд╡рд╕рд╛рдп рдирд┐рд╡рдбрд╛" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="рд╡рд┐рджреНрдпрд╛рд░реНрдереА">рд╡рд┐рджреНрдпрд╛рд░реНрдереА</SelectItem>
                      <SelectItem value="рд╢реЗрддрдХрд░реА">рд╢реЗрддрдХрд░реА</SelectItem>
                      <SelectItem value="рдХрд╛рдордЧрд╛рд░">рдХрд╛рдордЧрд╛рд░</SelectItem>
                      <SelectItem value="рдореЛрд▓рдордЬреВрд░реА">рдореЛрд▓рдордЬреВрд░реА</SelectItem>
                      <SelectItem value="рдЙрджреНрдпреЛрдЧ">рдЙрджреНрдпреЛрдЧ</SelectItem>
                      <SelectItem value="рдЧреГрд╣рд┐рдгреА">рдЧреГрд╣рд┐рдгреА</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label className="text-sm font-semibold text-foreground flex items-center gap-2">
                    <Users className="h-4 w-4 text-primary" />
                    рд▓рд╛рднрд╛рд░реНрдереА
                  </Label>
                  <Select value={form.childName} onValueChange={(value) => handleSelectChange("childName", value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="рд╕реНрд╡рдд:">рд╕реНрд╡рдд:</SelectItem>
                      <SelectItem value="рдореБрд▓рдЧрд╛">рдореБрд▓рдЧрд╛</SelectItem>
                      <SelectItem value="рдореБрд▓рдЧреА">рдореБрд▓рдЧреА</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Child Name Field (Conditional) */}
              {["рдореБрд▓рдЧрд╛", "рдореБрд▓рдЧреА"].includes(form.childName) && (
                <div className="space-y-2">
                  <Label htmlFor="valueChild" className="text-sm font-semibold text-foreground">
                    рд▓рд╛рднрд╛рд░реНрдереА рдЪреЗ рдирд╛рд╡ *
                  </Label>
                  <Input
                    id="valueChild"
                    name="valueChild"
                    value={form.valueChild}
                    onChange={handleInputChange}
                    className="transition-all duration-200 focus:shadow-md"
                    placeholder="рд▓рд╛рднрд╛рд░реНрдереА рдЪреЗ рдкреВрд░реНрдг рдирд╛рд╡ рд▓рд┐рд╣рд╛"
                  />
                </div>
              )}

              {/* Document Selection */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  рдЖрд╡рд╢реНрдпрдХ рдХрд╛рдЧрджрдкрддреНрд░реЗ рдирд┐рд╡рдбрд╛
                </h3>
                
                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {documentOptions.map(({ id, label, icon: Icon, color }) => (
                    <div key={id} className="flex items-center space-x-3 p-4 rounded-lg border border-border hover:border-primary/30 hover:bg-primary/5 transition-all duration-200 group">
                      <Checkbox
                        id={id}
                        checked={checkboxes[id as keyof typeof checkboxes]}
                        onCheckedChange={(checked) => handleCheckboxChange(id, !!checked)}
                        className="data-[state=checked]:bg-primary data-[state=checked]:border-primary"
                      />
                      <Label
                        htmlFor={id}
                        className="flex items-center gap-2 text-sm font-medium text-foreground cursor-pointer group-hover:text-primary transition-colors"
                      >
                        <Icon className={`h-4 w-4 ${color}`} />
                        {label}
                      </Label>
                    </div>
                  ))}
                </div>
              </div>

              {/* Conditional Caste and Religion Fields */}
              {checkboxes.casteCheckbox && (
                <div className="grid md:grid-cols-2 gap-6 p-4 bg-primary/5 rounded-lg border border-primary/20">
                  <div className="space-y-2">
                    <Label htmlFor="caste" className="text-sm font-semibold text-foreground">
                      рдЬрд╛рдд *
                    </Label>
                    <Input
                      id="caste"
                      name="caste"
                      value={form.caste}
                      onChange={handleInputChange}
                      className="transition-all duration-200 focus:shadow-md"
                      placeholder="рдЬрд╛рдд рд▓рд┐рд╣рд╛"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm font-semibold text-foreground flex items-center gap-2">
                      <User className="h-4 w-4 text-primary" />
                      рдзрд░реНрдо *
                    </Label>
                    <Select value={form.Religion} onValueChange={(value) => handleSelectChange("Religion", value)}>
                      <SelectTrigger>
                        <SelectValue placeholder="рдзрд░реНрдо рдирд┐рд╡рдбрд╛" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="рд╣рд┐рдВрджреВ">рд╣рд┐рдВрджреВ</SelectItem>
                        <SelectItem value="рдмреМрджреНрдз">рдмреМрджреНрдз</SelectItem>
                        <SelectItem value="рдЦреНрд░рд┐рд╢реНрдЪрди">рдЦреНрд░рд┐рд╢реНрдЪрди</SelectItem>
                        <SelectItem value="рдЬреИрди">рдЬреИрди</SelectItem>
                        <SelectItem value="рдореБрд╕реНрд▓рд┐рдо">рдореБрд╕реНрд▓рд┐рдо</SelectItem>
                        <SelectItem value="рд╢реАрдЦ">рд╢реАрдЦ</SelectItem>
                        <SelectItem value="рдкрд╛рд░рд╢реА">рдкрд╛рд░рд╢реА (рдЭреЛрд░рд╛рд╖реНрдЯреНрд░рд┐рдпрди)</SelectItem>
                        <SelectItem value="рдЗрддрд░">рдЗрддрд░</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}

              {/* Submit Button */}
              <div className="flex justify-center pt-6">
                <Button
                  type="submit"
          //        size="xl"
           //       variant="government"
                  disabled={isSubmitting}
                  className="px-12 py-3 font-semibold"
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-2 border-current border-t-transparent mr-2" />
                      рд╕рдмрдорд┐рдЯ рдХрд░рдд рдЖрд╣реЗ...
                    </>
                  ) : (
                    <>
                      <FileText className="h-5 w-5 mr-2" />
                      рд╕рдмрдорд┐рдЯ рдХрд░рд╛
                    </>
                  )}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
      </div>
    </div>
  </Layout>
);
};

export default SetuForm;