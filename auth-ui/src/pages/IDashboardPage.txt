import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import styled from "styled-components";
import SetuForm from "../forms/SetuForm.tsx";
import api from "@/lib/axios";

import Layout from "@/components/home/Layout";
import { 
  FileText, 
  User, 
  MapPin, 
  Briefcase, 
  Users, 
  Search, 
  TrendingUp,
  Clock,
  CheckCircle,
  AlertCircle,
  Building2,
  ShieldCheck,
  GraduationCap,
  CreditCard,
  BookOpen
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";



interface DashboardStats {
  totalApplications: number;
  pendingApplications: number;
  completedApplications: number;
  walletBalance: number;
}

interface FormCategory {
  id: string;
  name: string;
  nameMarathi: string;
  description: string;
  icon: React.ElementType;
  color: string;
  route: string;
  isPopular?: boolean;
}



const Dashboard: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");

  const [username, setUsername] = useState("Loading..."); // тЬЕ Moved here
  const [stats, setStats] = useState<DashboardStats>({
    totalApplications: 12,
    pendingApplications: 3,
    completedApplications: 9,
    walletBalance: 0.00
  });
  const navigate = useNavigate();
  const { toast } = useToast();
/*
   useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await api.get("/api/auth/me");
        setUsername(res.data.username);
      } catch (err) {
        setUsername("Guest");
        console.error("Failed to fetch user info:", err);
      }
    };

    fetchUser();
  }, []);
*/
  
  const formCategories: FormCategory[] = [
    {
      id: "setu",
      name: "SETU Form",
      nameMarathi: "рд╕реЗрддреВ рдлреЙрд░реНрдо",
      description: "рдЬрд╛рдд рдкреНрд░рдорд╛рдгрдкрддреНрд░рд╛рдмрд╛рдмрдд рд╕реНрд╡рдпрдВ рдШреЛрд╖рдгрд╛рдкрддреНрд░",
      icon: FileText,
      color: "bg-gradient-to-br from-blue-500 to-blue-600",
      route: "/forms/setu",
      isPopular: true
    },
    {
      id: "caste",
      name: "Caste Validity",
      nameMarathi: "рдЬрд╛рдд рд╡реИрдзрддрд╛",
      description: "рдЬрд╛рдд рдкреНрд░рдорд╛рдгрдкрддреНрд░ рд╡реИрдзрддрд╛ рддрдкрд╛рд╕рдгреА",
      icon: ShieldCheck,
      color: "bg-gradient-to-br from-green-500 to-green-600",
      route: "/forms/caste-validity"
    },
    {
      id: "ration",
      name: "Ration Card",
      nameMarathi: "рд░реЗрд╢рди рдХрд╛рд░реНрдб",
      description: "рд░реЗрд╢рди рдХрд╛рд░реНрдб рдЕрд░реНрдЬ рд╡ рдиреВрддрдиреАрдХрд░рдг",
      icon: CreditCard,
      color: "bg-gradient-to-br from-orange-500 to-orange-600",
      route: "/forms/ration"
    },
    {
      id: "csc",
      name: "CSC Services",
      nameMarathi: "рд╕реАрдПрд╕рд╕реА рд╕реЗрд╡рд╛",
      description: "рд╕рд╛рдорд╛рдиреНрдп рд╕реЗрд╡рд╛ рдХреЗрдВрджреНрд░ рд╕реЗрд╡рд╛",
      icon: Building2,
      color: "bg-gradient-to-br from-purple-500 to-purple-600",
      route: "/forms/csc"
    },
    {
      id: "education",
      name: "Education Form",
      nameMarathi: "рд╢рд┐рдХреНрд╖рдг рдлреЙрд░реНрдо",
      description: "рд╢реИрдХреНрд╖рдгрд┐рдХ рдкреНрд░рдорд╛рдгрдкрддреНрд░реЗ рд╡ рдЕрд░реНрдЬ",
      icon: GraduationCap,
      color: "bg-gradient-to-br from-indigo-500 to-indigo-600",
      route: "/forms/education"
    },
    /*
    {
      id: "income",
      name: "Income Certificate",
      nameMarathi: "рдЙрддреНрдкрдиреНрди рдкреНрд░рдорд╛рдгрдкрддреНрд░",
      description: "рдЙрддреНрдкрдиреНрди рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдЕрд░реНрдЬ",
      icon: Briefcase,
      color: "bg-gradient-to-br from-teal-500 to-teal-600",
      route: "/forms/income"
    }
    */

    
  ];

  const filteredForms = formCategories.filter(form => 
    form.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    form.nameMarathi.includes(searchTerm) ||
    form.description.includes(searchTerm)
  );

  const handleFormClick = (route: string, formName: string) => {
    toast({
      title: "рдлреЙрд░реНрдо рдЙрдШрдбрдд рдЖрд╣реЗ",
      description: `${formName} рдлреЙрд░реНрдо рдЙрдШрдбрдд рдЖрд╣реЗ...`,
    });
    // Navigate to form - implement routing logic here
    window.location.href = route;
  };

  const handleLogout = () => {
    toast({
      title: "рд▓реЙрдЧрдЖрдЙрдЯ",
      description: "рддреБрдореНрд╣реА рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рд▓реЙрдЧрдЖрдЙрдЯ рдЭрд╛рд▓рд╛ рдЖрд╣рд╛рдд",
    });
    // Implement logout logic here
  };

  return (
    <div className="bg-gradient-subtle">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        {/* Welcome Section 
        <div className="mb-8">
          <h2 className="text-3xl font-bold text-foreground mb-2">
            рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ, {username.split(' ')[0]}! ЁЯСЛ
          </h2>
          <p className="text-muted-foreground">
            рдЖрдкрд▓реНрдпрд╛ рд╕рд░рдХрд╛рд░реА рдХрд╛рдЧрджрдкрддреНрд░рд╛рдВрд╕рд╛рдареА рдЖрд╡рд╢реНрдпрдХ рд╕рд░реНрд╡ рдлреЙрд░реНрдо рдпреЗрдереЗ рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗрдд
          </p>
        </div>
        */}
        
        
  <Layout>
    <div className="bg-gradient-subtle">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Paste everything that was inside here тАУ all your content stays as is */}
        
        
        {/* Welcome Section 
        <div className="mb-8">
          <h2 className="text-3xl font-bold text-foreground mb-2">
            рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ, {username.split(' ')[0]}! ЁЯСЛ
          </h2>
          <p className="text-muted-foreground">
            рдЖрдкрд▓реНрдпрд╛ рд╕рд░рдХрд╛рд░реА рдХрд╛рдЧрджрдкрддреНрд░рд╛рдВрд╕рд╛рдареА рдЖрд╡рд╢реНрдпрдХ рд╕рд░реНрд╡ рдлреЙрд░реНрдо рдпреЗрдереЗ рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗрдд
          </p>
        </div>

        */}
        

        {/* ЁЯСЗ Keep everything below inside here */}
        {/* Stats Cards, Search, Forms Grid, Quick Actions, etc. */}
        
     


        {/* Stats Cards */}
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="hover:shadow-lg transition-all duration-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">рдПрдХреВрдг рдЕрд░реНрдЬ</CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary">{stats.totalApplications}</div>
              <p className="text-xs text-muted-foreground">
                <TrendingUp className="inline h-3 w-3 mr-1" />
                +2 рдпрд╛ рдорд╣рд┐рдиреНрдпрд╛рдд
              </p>
            </CardContent>
          </Card>

          <Card className="hover:shadow-lg transition-all duration-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">рдкреНрд░рд▓рдВрдмрд┐рдд рдЕрд░реНрдЬ</CardTitle>
              <Clock className="h-4 w-4 text-warning" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-warning">{stats.pendingApplications}</div>
              <p className="text-xs text-muted-foreground">рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╕реБрд░реВ рдЖрд╣реЗ</p>
            </CardContent>
          </Card>

          <Card className="hover:shadow-lg transition-all duration-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">рдкреВрд░реНрдг рдЕрд░реНрдЬ</CardTitle>
              <CheckCircle className="h-4 w-4 text-success" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-success">{stats.completedApplications}</div>
              <p className="text-xs text-muted-foreground">рдпрд╢рд╕реНрд╡реА рдкреВрд░реНрдг</p>
            </CardContent>
          </Card>
          
          
          <Card className="hover:shadow-lg transition-all duration-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">рд╡реЙрд▓реЗрдЯ рдмреЕрд▓рдиреНрд╕</CardTitle>  
              <AlertCircle className="h-4 w-4 text-info" />
            </CardHeader>
            
            <CardContent>
              <div className="text-2xl font-bold text-info">тВ╣{stats.walletBalance}</div>
              <p className="text-xs text-muted-foreground">рдЙрдкрд▓рдмреНрдз рд░рдХреНрдХрдо</p>
            </CardContent>
          </Card>
        </div>

        {/* Search Bar */}
        <div className="mb-8">
          <div className="relative max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              type="text"
              placeholder="рдлреЙрд░реНрдо рд╢реЛрдзрд╛..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>

        {/* Forms Grid */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-bold text-foreground">рдЙрдкрд▓рдмреНрдз рдлреЙрд░реНрдо</h3>
            <Badge variant="secondary">
              {filteredForms.length} рдлреЙрд░реНрдо рдЙрдкрд▓рдмреНрдз
            </Badge>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredForms.map((form) => {
              const IconComponent = form.icon;
              return (
                <Card 
                  key={form.id} 
                  className="group hover:shadow-xl transition-all duration-300 cursor-pointer transform hover:scale-105 border-0 overflow-hidden"
                  onClick={() => handleFormClick(form.route, form.nameMarathi)}
                >
                  <div className={`h-2 ${form.color}`} />
                  <CardHeader className="pb-4">
                    <div className="flex items-start justify-between">
                      <div className={`w-12 h-12 ${form.color} rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-200`}>
                        <IconComponent className="h-6 w-6 text-white" />
                      </div>
                      {form.isPopular && (
                        <Badge variant="secondary" className="bg-primary/10 text-primary border-primary/20">
                          рд▓реЛрдХрдкреНрд░рд┐рдп
                        </Badge>
                      )}
                    </div>
                    <CardTitle className="text-lg group-hover:text-primary transition-colors">
                      {form.nameMarathi}
                    </CardTitle>
                    <p className="text-sm text-muted-foreground mt-1">{form.name}</p>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-muted-foreground mb-4">{form.description}</p>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="w-full group-hover:bg-primary group-hover:text-primary-foreground transition-colors"
                    >
                      рдлреЙрд░реНрдо рдЙрдШрдбрд╛
                    </Button>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>

        {/* Quick Actions */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BookOpen className="h-5 w-5" />
              рджреНрд░реБрдд рдХрд╛рд░реНрдпреЗ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Button variant="outline" className="h-16 flex-col">
                <Clock className="h-5 w-5 mb-2" />
                рдЕрд░реНрдЬ рд╕реНрдерд┐рддреА рддрдкрд╛рд╕рд╛
              </Button>
              <Button variant="outline" className="h-16 flex-col">
                <FileText className="h-5 w-5 mb-2" />
                рдорд╛рдЧреАрд▓ рдЕрд░реНрдЬ рдкрд╣рд╛
              </Button>
              <Button variant="outline" className="h-16 flex-col">
                <User className="h-5 w-5 mb-2" />
                рдкреНрд░реЛрдлрд╛рдЗрд▓ рдЕрдкрдбреЗрдЯ рдХрд░рд╛
              </Button>
            </div>
          </CardContent>
        </Card>

          
        {/* Recent Activity 
        <Card>
          <CardHeader>
            <CardTitle>рдЕрд▓реАрдХрдбреАрд▓ рдХреНрд░рд┐рдпрд╛рдХрд▓рд╛рдк</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center gap-4 p-3 rounded-lg bg-muted/50">
                <div className="w-2 h-2 bg-success rounded-full" />
                <div className="flex-1">
                  <p className="text-sm font-medium">рдЬрд╛рдд рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдЕрд░реНрдЬ рд╕реНрд╡реАрдХрд╛рд░рд▓рд╛ рдЧреЗрд▓рд╛</p>
                  <p className="text-xs text-muted-foreground">2 рддрд╛рд╕ рдкреВрд░реНрд╡реА</p>
                </div>
              </div>
              <div className="flex items-center gap-4 p-3 rounded-lg bg-muted/50">
                <div className="w-2 h-2 bg-warning rounded-full" />
                <div className="flex-1">
                  <p className="text-sm font-medium">рдЙрддреНрдкрдиреНрди рдкреНрд░рдорд╛рдгрдкрддреНрд░ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╕реБрд░реВ</p>
                  <p className="text-xs text-muted-foreground">1 рджрд┐рд╡рд╕ рдкреВрд░реНрд╡реА</p>
                </div>
              </div>
              <div className="flex items-center gap-4 p-3 rounded-lg bg-muted/50">
                <div className="w-2 h-2 bg-info rounded-full" />
                <div className="flex-1">
                  <p className="text-sm font-medium">рд░реЗрд╢рди рдХрд╛рд░реНрдб рдиреВрддрдиреАрдХрд░рдг рдкреВрд░реНрдг</p>
                  <p className="text-xs text-muted-foreground">3 рджрд┐рд╡рд╕ рдкреВрд░реНрд╡реА</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
        */}
         </div>
  </div>
  </Layout>
      );
      </div>
    </div>
    
  );
};

export default Dashboard;